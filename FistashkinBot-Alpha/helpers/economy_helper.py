import disnake
import datetime
import random

from disnake.ext import commands
from utils import enums, main, CustomError, constant

from classes import database as db


class EconomyHelper:
    def __init__(self):
        self.color = enums.Color()
        self.rp = constant.RolePlay()
        self.economy = main.EconomySystem()
        self.enum = enums.Enum()

    async def hit(
        self, inter: disnake.ApplicationCommandInteraction, body_part: str, amount: int
    ):
        await inter.response.defer(ephemeral=True)
        data = await db.get_data(inter.author)
        if amount > data["balance"]:
            raise CustomError(
                f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ **{self.economy.CURRENCY_NAME}** –¥–ª—è –∏–≥—Ä—ã!"
            )
        else:
            await db.update_member(
                "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
                [amount, inter.author.id, inter.guild.id],
            )
            if not random.choice(range(0, 4)):
                await db.update_member(
                    "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                    [amount * 2, inter.author.id, inter.guild.id],
                )
                embed = (
                    disnake.Embed(
                        description=f"**–¢—ã —Å–¥–µ–ª–∞–ª {body_part} –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –≤ –Ω–æ–∫–∞—É—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, —Ç–≤–æ–π —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å {amount * 2} {self.CURRENCY_NAME} –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!**",
                        color=Color.GREEN,
                    )
                    .set_image(url=random.choice(self.rp.FIGHT_CLUB_VICTORY_IMAGES))
                    .set_author(
                        name="–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–±", icon_url=inter.author.display_avatar.url
                    )
                )
                await inter.edit_original_message(embed=embed, view=None)
            else:
                embed = (
                    disnake.Embed(
                        description=f"–¢—ã —Å–¥–µ–ª–∞–ª **{body_part}**, –Ω–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∑–∞—â–∏—Ç–∏–ª—Å—è –∏ —Å–¥–µ–ª–∞–ª —É–¥–∞—Ä. –¢—ã –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ 5 –∑—É–±–æ–≤ –∏ **{amount} {self.CURRENCY_NAME}**.",
                        color=Color.RED,
                    )
                    .set_image(url=random.choice(self.rp.FIGHT_CLUB_DEFEAT_IMAGES))
                    .set_author(
                        name="–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–±", icon_url=inter.author.display_avatar.url
                    )
                )
                await inter.edit_original_message(embed=embed, view=None)


class CoinButtons(disnake.ui.View):
    message: disnake.Message

    def __init__(self, inter):
        self.inter = inter
        self.economy = main.EconomySystem()
        self.color = enums.Color()
        super().__init__(timeout=120.0)

    async def on_timeout(self):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=None)
        self.stop()

    @disnake.ui.button(label="–û—Ä—ë–ª", emoji="ü™ô", style=disnake.ButtonStyle.primary)
    async def orel_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
        self.stop()
        data = await db.get_data(inter.author)
        await db.update_member(
            "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
            [
                int(inter.message.embeds[0].fields[0].value),
                inter.author.id,
                inter.guild.id,
            ],
        )
        if not random.choice(range(0, 4)):
            await inter.response.defer(ephemeral=True)
            await db.update_member(
                "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                [
                    int(inter.message.embeds[0].fields[0].value)
                    * self.economy.MULTIPLIER,
                    inter.author.id,
                    inter.guild.id,
                ],
            )
            embed = (
                disnake.Embed(
                    title="–£—Å–ø–µ—Ö!",
                    description=f"**–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∏–≥—Ä–∞–ª {str(round(int(inter.message.embeds[0].fields[0].value) * self.economy.MULTIPLIER))} {self.economy.CURRENCY_NAME}!**",
                    color=self.color.GREEN,
                )
                .set_thumbnail(
                    url="https://cdn-icons-png.flaticon.com/512/272/272525.png"
                )
                .set_author(name="–ú–æ–Ω–µ—Ç–∫–∞", icon_url=inter.author.display_avatar.url)
            )
            await inter.edit_original_message(embed=embed, view=None)
        else:
            await inter.response.defer(ephemeral=True)
            embed = (
                disnake.Embed(
                    title="–ü—Ä–æ–º–∞—Ö!",
                    description=f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª **{inter.message.embeds[0].fields[0].value} {self.economy.CURRENCY_NAME}!**",
                    color=self.color.RED,
                )
                .set_thumbnail(
                    url="https://cdn-icons-png.flaticon.com/512/272/272525.png"
                )
                .set_author(name="–ú–æ–Ω–µ—Ç–∫–∞", icon_url=inter.author.display_avatar.url)
            )
            await inter.edit_original_message(embed=embed, view=None)

    @disnake.ui.button(label="–†–µ—à–∫–∞", emoji="ü™ô", style=disnake.ButtonStyle.primary)
    async def reshka_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
        self.stop()
        data = await db.get_data(inter.author)
        await db.update_member(
            "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
            [
                int(inter.message.embeds[0].fields[0].value),
                inter.author.id,
                inter.guild.id,
            ],
        )
        if not random.choice(range(0, 4)):
            await inter.response.defer(ephemeral=True)
            await db.update_member(
                "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                [
                    int(inter.message.embeds[0].fields[0].value)
                    * self.economy.MULTIPLIER,
                    inter.author.id,
                    inter.guild.id,
                ],
            )
            embed = (
                disnake.Embed(
                    title="–£—Å–ø–µ—Ö!",
                    description=f"**–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∏–≥—Ä–∞–ª {str(round(int(inter.message.embeds[0].fields[0].value) * self.economy.MULTIPLIER))} {self.economy.CURRENCY_NAME}!**",
                    color=self.color.GREEN,
                )
                .set_thumbnail(
                    url="https://cdn-icons-png.flaticon.com/512/272/272525.png"
                )
                .set_author(name="–ú–æ–Ω–µ—Ç–∫–∞", icon_url=inter.author.display_avatar.url)
            )
            await inter.edit_original_message(embed=embed, view=None)
        else:
            await inter.response.defer(ephemeral=True)
            embed = (
                disnake.Embed(
                    title="–ü—Ä–æ–º–∞—Ö!",
                    description=f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª **{inter.message.embeds[0].fields[0].value} {self.economy.CURRENCY_NAME}!**",
                    color=self.color.RED,
                )
                .set_thumbnail(
                    url="https://cdn-icons-png.flaticon.com/512/272/272525.png"
                )
                .set_author(name="–ú–æ–Ω–µ—Ç–∫–∞", icon_url=inter.author.display_avatar.url)
            )
            await inter.edit_original_message(embed=embed, view=None)


class FightButtons(disnake.ui.View):
    message: disnake.Message

    def __init__(self, inter):
        self.inter = inter
        self.economy = main.EconomySystem()
        self.hit = EconomyHelper()
        self.color = enums.Color()
        super().__init__(timeout=120.0)

    async def on_timeout(self, inter):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=None)
        self.stop()

    @disnake.ui.button(
        label="–£–¥–∞—Ä –≤ –Ω–æ–≥–∏",
        emoji="ü¶µ",
        custom_id="legs_hit",
        style=disnake.ButtonStyle.primary,
    )
    async def legs_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
        self.stop()
        return await self.hit.hit(
            inter,
            body_part="—É–¥–∞—Ä –≤ –Ω–æ–≥–∏",
            amount=int(inter.message.embeds[0].fields[0].value),
        )

    @disnake.ui.button(
        label="–£–¥–∞—Ä –≤ –∂–∏–≤–æ—Ç",
        emoji="üëä",
        custom_id="torso_hit",
        style=disnake.ButtonStyle.primary,
    )
    async def torso_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
        self.stop()
        return await self.hit.hit(
            inter,
            body_part="—É–¥–∞—Ä –≤ –∂–∏–≤–æ—Ç",
            amount=int(inter.message.embeds[0].fields[0].value),
        )

    @disnake.ui.button(
        label="–£–¥–∞—Ä –≤ –≥–æ–ª–æ–≤—É",
        emoji="ü§ï",
        custom_id="head_hit",
        style=disnake.ButtonStyle.primary,
    )
    async def head_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
        self.stop()
        return await self.hit.hit(
            inter,
            body_part="—É–¥–∞—Ä –≤ –≥–æ–ª–æ–≤—É",
            amount=int(inter.message.embeds[0].fields[0].value),
        )


class CaseButtons(disnake.ui.View):
    message: disnake.Message

    def __init__(self, inter):
        self.inter = inter
        self.economy = main.EconomySystem()
        self.color = enums.Color()
        super().__init__(timeout=120.0)

    async def on_timeout(self, inter):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=None)
        self.stop()

    @disnake.ui.button(
        label=f"–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (100 FC)",
        emoji="üç™",
        custom_id="open_case",
        style=disnake.ButtonStyle.success,
    )
    async def open_case_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
        self.stop()
        await inter.response.defer(ephemeral=False)
        data = await db.get_data(inter.author)
        await db.update_member(
            "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
            [100, inter.author.id, inter.guild.id],
        )
        rnd_int_def = random.randint(100, 500)
        rnd_int_max = random.randint(500, 1000)
        rnd_int_min = random.randint(100, 200)
        case = [1.0, 0.1, 0.3]
        random_case = random.choices([rnd_int_def, rnd_int_max, rnd_int_min], case)
        prize = self.enum.format_large_number(random_case)
        embed = (
            disnake.Embed(
                title="–ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!",
                description=f"**–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {prize} {self.economy.CURRENCY_NAME}**",
                color=self.color.GREEN,
            )
            .set_thumbnail(
                url="https://cdn-icons-png.flaticon.com/512/10348/10348893.png"
            )
            .set_author(name="–ö–µ–π—Å—ã", icon_url=inter.author.display_avatar.url)
        )
        await db.update_member(
            "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
            [random_case, inter.author.id, inter.guild.id],
        )
        await inter.edit_original_message(embed=embed, view=None)


class SlotMachineButtons(disnake.ui.View):
    message: disnake.Message

    def __init__(self, inter, amount: int):
        super().__init__(timeout=120.0)
        self.inter = inter
        self.amount = amount
        self.economy = main.EconomySystem()
        self.color = enums.Color()
        self.enum = enums.Enum()
        self.otheremojis = constant.OtherEmojis()

    async def on_timeout(self):
        for child in self.children:
            if isinstance(child, disnake.ui.Button):
                child.disabled = True
        await self.message.edit(view=self)
        self.stop()

    @disnake.ui.button(label="–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å", style=disnake.ButtonStyle.green, emoji="üïπÔ∏è")
    async def add_role(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
        self.stop()
        await inter.response.defer(ephemeral=False)
        reels = self.otheremojis.REELS
        random.shuffle(reels)

        result = []
        for _ in range(3):
            symbol = random.choice(reels)
            result.append(symbol)
        random.shuffle(reels)
        ligne1 = []
        for _ in range(3):
            symbol = random.choice(reels)
            ligne1.append(symbol)
        ligne2 = []
        for _ in range(3):
            symbol = random.choice(reels)
            ligne2.append(symbol)

        slotmachine = [
            f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
            f"**| `{ligne1[0]} | {ligne1[1]} | {ligne1[2]}` |**\n"
            f"**>**``{result[0]} | {result[1]} | {result[2]}``**<**\n"
            f"**| `{ligne2[0]} | {ligne2[1]} | {ligne2[2]}` |**\n"
            f"‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
        ]

        final = "".join(slotmachine)
        slot_amount = self.enum.format_large_number(self.amount)
        description = [
            f"–°—É–º–º–∞, –≤–Ω–µ—Å–µ–Ω–Ω–∞—è –≤ –ª–æ—Ç –í–∞–º–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞: `{slot_amount}` {self.economy.CURRENCY_NAME}\n\n",
            f"{inter.author.mention}, –≤–Ω–µ—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É –∏ –∑–∞–ø—É—Å—Ç–∏–≤ ¬´–°–ª–æ—Ç-–º–∞—à–∏–Ω—É¬ª, –í—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π —Å–ª–µ–¥—É—é—â—É—é –≤—ã–ø–∞–≤—à—É—é –í–∞–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é:\n\n",
            f"{final}",
        ]

        if result[0] == result[1] == result[2]:
            slot_final = self.enum.format_large_number(self.amount * 5)
            description.append(
                f"ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å–æ—Ä–≤–∞–ª–∏ –¥–∂–µ–∫–ø–æ—Ç –∏ –ø—Ä–µ—É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –≤ `5` —Ä–∞–∑! (–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç `{slot_final}` {self.economy.CURRENCY_NAME})"
            )
            await db.update_member(
                "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                [
                    self.amount * 5,
                    inter.author.id,
                    inter.guild.id,
                ],
            )

        elif (
            (result[0] == result[1])
            or (result[1] == result[2])
            or (result[0] == result[2])
        ):
            slot_final = self.enum.format_large_number(self.amount * 2)
            description.append(
                f"ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏ –ø—Ä–µ—É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –≤ `2` —Ä–∞–∑–∞! (–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç `{slot_final}` {self.economy.CURRENCY_NAME})"
            )
            await db.update_member(
                "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                [
                    self.amount * 2,
                    inter.author.id,
                    inter.guild.id,
                ],
            )

        else:
            slot_final = self.enum.format_large_number(self.amount)
            description.append(
                f"üò¢ –£–≤—ã, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–π! `{slot_final}` {self.economy.CURRENCY_NAME} –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã —Å –ª–∏—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞!"
            )
            await db.update_member(
                "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
                [
                    self.amount,
                    inter.author.id,
                    inter.guild.id,
                ],
            )

        embed = disnake.Embed(description=f"".join(description), color=self.color.MAIN)
        embed.set_author(
            name="–ê–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ ¬´–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞¬ª", icon_url=inter.author.display_avatar.url
        )
        await inter.edit_original_message(embed=embed, view=None)

    @disnake.ui.button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.red, emoji="‚ùå")
    async def delete_role(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
        self.stop()
        await self.message.delete()
