import disnake
import datetime
import random

from disnake.ext import commands
from utils import enums, main, CustomError, constant

from classes import database as db


class EconomyHelper:
    def __init__(self):
        self.color = enums.Color()
        self.rp = constant.RolePlay()
        self.economy = main.EconomySystem()
        self.enum = enums.Enum()

    async def hit(
        self, inter: disnake.ApplicationCommandInteraction, body_part: str, amount: int
    ):
        await inter.response.defer(ephemeral=True)

        await db.update_member(
            "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
            [amount, inter.author.id, inter.guild.id],
        )

        is_victory = not random.choice(range(0, 4))
        win_amount = amount * 2

        if is_victory:
            description = (
                f"**–¢—ã —Å–¥–µ–ª–∞–ª {body_part} –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –≤ –Ω–æ–∫–∞—É—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, "
                f"—Ç—ã –ø–æ–ª—É—á–∞–µ—à—å {win_amount} {self.economy.CURRENCY_NAME} –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!**"
            )
            color = self.color.GREEN
            image_url = random.choice(self.rp.FIGHT_CLUB_VICTORY_IMAGES)

            await db.update_member(
                "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                [win_amount, inter.author.id, inter.guild.id],
            )
        else:
            description = (
                f"–¢—ã —Å–¥–µ–ª–∞–ª **{body_part}**, –Ω–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∑–∞—â–∏—Ç–∏–ª—Å—è –∏ —Å–¥–µ–ª–∞–ª —É–¥–∞—Ä. "
                f"–¢—ã –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ 5 –∑—É–±–æ–≤ –∏ **{amount} {self.economy.CURRENCY_NAME}**."
            )
            color = self.color.RED
            image_url = random.choice(self.rp.FIGHT_CLUB_DEFEAT_IMAGES)

        embed = (
            disnake.Embed(description=description, color=color)
            .set_image(url=image_url)
            .set_author(name="–ë–æ–π—Ü–æ–≤—Å–∫–∏–π –∫–ª—É–±", icon_url=inter.author.display_avatar.url)
        )

        await inter.edit_original_message(embed=embed, view=None)



class CoinButtons(disnake.ui.View):
    message: disnake.Message

    def __init__(self, inter):
        self.inter = inter
        self.economy = main.EconomySystem()
        self.color = enums.Color()
        super().__init__(timeout=120.0)

    async def on_timeout(self):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=None)
        self.stop()

    @disnake.ui.button(label="–û—Ä—ë–ª", emoji="ü™ô", style=disnake.ButtonStyle.primary)
    async def orel_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description="‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )

        self.stop()

        await inter.response.defer(ephemeral=True)

        bet_amount = int(inter.message.embeds[0].fields[0].value)

        await db.update_member(
            "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
            [bet_amount, inter.author.id, inter.guild.id],
        )

        is_win = not random.choice(range(0, 4))

        if is_win:
            win_amount = bet_amount * self.economy.MULTIPLIER
            await db.update_member(
                "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                [win_amount, inter.author.id, inter.guild.id],
            )
            title = "–£—Å–ø–µ—Ö!"
            description = f"**–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∏–≥—Ä–∞–ª {win_amount} {self.economy.CURRENCY_NAME}!**"
            color = self.color.GREEN
        else:
            title = "–ü—Ä–æ–º–∞—Ö!"
            description = f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª **{bet_amount} {self.economy.CURRENCY_NAME}!**"
            color = self.color.RED

        embed = (
            disnake.Embed(title=title, description=description, color=color)
            .set_thumbnail(url="https://cdn-icons-png.flaticon.com/512/272/272525.png")
            .set_author(name="–ú–æ–Ω–µ—Ç–∫–∞", icon_url=inter.author.display_avatar.url)
        )

        await inter.edit_original_message(embed=embed, view=None)


    @disnake.ui.button(label="–†–µ—à–∫–∞", emoji="ü™ô", style=disnake.ButtonStyle.primary)
    async def reshka_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description="‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )

        self.stop()

        await inter.response.defer(ephemeral=True)

        bet_amount = int(inter.message.embeds[0].fields[0].value)
        
        await db.update_member(
            "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
            [bet_amount, inter.author.id, inter.guild.id],
        )

        is_win = not random.choice(range(0, 4))

        if is_win:
            win_amount = bet_amount * self.economy.MULTIPLIER
            await db.update_member(
                "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
                [win_amount, inter.author.id, inter.guild.id],
            )
            title = "–£—Å–ø–µ—Ö!"
            description = f"**–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∏–≥—Ä–∞–ª {win_amount} {self.economy.CURRENCY_NAME}!**"
            color = self.color.GREEN
        else:
            title = "–ü—Ä–æ–º–∞—Ö!"
            description = f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª **{bet_amount} {self.economy.CURRENCY_NAME}!**"
            color = self.color.RED

        embed = (
            disnake.Embed(title=title, description=description, color=color)
            .set_thumbnail(url="https://cdn-icons-png.flaticon.com/512/272/272525.png")
            .set_author(name="–ú–æ–Ω–µ—Ç–∫–∞", icon_url=inter.author.display_avatar.url)
        )

        await inter.edit_original_message(embed=embed, view=None)


class FightButtons(disnake.ui.View):
    message: disnake.Message

    def __init__(self, inter):
        self.inter = inter
        self.economy = main.EconomySystem()
        self.hit = EconomyHelper()
        self.color = enums.Color()
        super().__init__(timeout=120.0)

    async def on_timeout(self, inter):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=None)
        self.stop()

    @disnake.ui.button(
        label="–£–¥–∞—Ä –≤ –Ω–æ–≥–∏",
        emoji="ü¶µ",
        custom_id="legs_hit",
        style=disnake.ButtonStyle.primary,
    )
    async def legs_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
        
        self.stop()

        return await self.hit.hit(
            inter,
            body_part="—É–¥–∞—Ä –≤ –Ω–æ–≥–∏",
            amount=int(inter.message.embeds[0].fields[0].value),
        )

    @disnake.ui.button(
        label="–£–¥–∞—Ä –≤ –∂–∏–≤–æ—Ç",
        emoji="üëä",
        custom_id="torso_hit",
        style=disnake.ButtonStyle.primary,
    )
    async def torso_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )

        self.stop()

        return await self.hit.hit(
            inter,
            body_part="—É–¥–∞—Ä –≤ –∂–∏–≤–æ—Ç",
            amount=int(inter.message.embeds[0].fields[0].value),
        )

    @disnake.ui.button(
        label="–£–¥–∞—Ä –≤ –≥–æ–ª–æ–≤—É",
        emoji="ü§ï",
        custom_id="head_hit",
        style=disnake.ButtonStyle.primary,
    )
    async def head_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )

        self.stop()

        return await self.hit.hit(
            inter,
            body_part="—É–¥–∞—Ä –≤ –≥–æ–ª–æ–≤—É",
            amount=int(inter.message.embeds[0].fields[0].value),
        )


class CaseButtons(disnake.ui.View):
    message: disnake.Message

    def __init__(self, inter):
        self.inter = inter
        self.economy = main.EconomySystem()
        self.color = enums.Color()
        self.enum = enums.Enum()
        super().__init__(timeout=120.0)

    async def on_timeout(self, inter):
        for child in self.children:
            child.disabled = True
        await self.message.edit(view=None)
        self.stop()

    @disnake.ui.button(
        label=f"–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (100 FC)",
        emoji="üç™",
        custom_id="open_case",
        style=disnake.ButtonStyle.success,
    )
    async def open_case_button_callback(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description="‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )

        self.stop()

        await inter.response.defer(ephemeral=False)

        bet_amount = 100
        await db.update_member(
            "UPDATE users SET balance = balance - ? WHERE member_id = ? AND guild_id = ?",
            [bet_amount, inter.author.id, inter.guild.id],
        )

        prize_weights = [1.0, 0.1, 0.3]
        prize_values = [
            random.randint(100, 150),
            random.randint(500, 1000),
            random.randint(200, 250),
        ]
        prize = random.choices(prize_values, weights=prize_weights, k=1)[0]

        formatted_prize = self.enum.format_large_number(prize)

        await db.update_member(
            "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
            [prize, inter.author.id, inter.guild.id],
        )

        embed = (
            disnake.Embed(
                title="–ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!",
                description=f"**–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {formatted_prize} {self.economy.CURRENCY_NAME}**",
                color=self.color.GREEN,
            )
            .set_thumbnail(url="https://cdn-icons-png.flaticon.com/512/10348/10348893.png")
            .set_author(name="–ö–µ–π—Å—ã", icon_url=inter.author.display_avatar.url)
        )

        await inter.edit_original_message(embed=embed, view=None)



class SlotMachineButtons(disnake.ui.View):
    message: disnake.Message

    def __init__(self, inter, amount: int):
        super().__init__(timeout=120.0)
        self.inter = inter
        self.amount = amount
        self.economy = main.EconomySystem()
        self.color = enums.Color()
        self.enum = enums.Enum()
        self.otheremojis = constant.OtherEmojis()

    async def on_timeout(self):
        for child in self.children:
            if isinstance(child, disnake.ui.Button):
                child.disabled = True
        await self.message.edit(view=self)
        self.stop()

    @disnake.ui.button(label="–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å", style=disnake.ButtonStyle.green, emoji="üïπÔ∏è")
    async def add_role(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description="‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )

        self.stop()
        await inter.response.defer(ephemeral=False)

        reels = self.otheremojis.REELS
        slot_lines = [[random.choice(reels) for _ in range(3)] for _ in range(3)]

        slot_display = (
            "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
            f"**| `{slot_lines[0][0]} | {slot_lines[0][1]} | {slot_lines[0][2]}` |**\n"
            f"**>**``{slot_lines[1][0]} | {slot_lines[1][1]} | {slot_lines[1][2]}``**<**\n"
            f"**| `{slot_lines[2][0]} | {slot_lines[2][1]} | {slot_lines[2][2]}` |**\n"
            "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"
        )

        slot_amount = self.enum.format_large_number(self.amount)
        description = [
            f"–°—É–º–º–∞, –≤–Ω–µ—Å–µ–Ω–Ω–∞—è –≤ –ª–æ—Ç –í–∞–º–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞: `{slot_amount}` {self.economy.CURRENCY_NAME}\n\n",
            f"{inter.author.mention}, –≤–Ω–µ—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—É–º–º—É –∏ –∑–∞–ø—É—Å—Ç–∏–≤ ¬´–°–ª–æ—Ç-–º–∞—à–∏–Ω—É¬ª, –í—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π —Å–ª–µ–¥—É—é—â—É—é –≤—ã–ø–∞–≤—à—É—é –í–∞–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é:\n\n",
            f"{slot_display}",
        ]

        win_multiplier = 0
        if slot_lines[1][0] == slot_lines[1][1] == slot_lines[1][2]:
            win_multiplier = 5
            description.append(
                f"ü•≥ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!** –í—ã —Å–æ—Ä–≤–∞–ª–∏ –¥–∂–µ–∫–ø–æ—Ç –∏ –ø—Ä–µ—É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –≤ `5` —Ä–∞–∑!** "
                f"(–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç `{self.enum.format_large_number(self.amount * 5)}` {self.economy.CURRENCY_NAME})"
            )
        elif (
            slot_lines[1][0] == slot_lines[1][1]
            or slot_lines[1][1] == slot_lines[1][2]
            or slot_lines[1][0] == slot_lines[1][2]
        ):
            win_multiplier = 2
            description.append(
                f"ü•≥ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∏ –ø—Ä–µ—É–º–Ω–æ–∂–∏–ª–∏ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –≤ `2` —Ä–∞–∑–∞!** "
                f"(–í–∞—à –≤—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç `{self.enum.format_large_number(self.amount * 2)}` {self.economy.CURRENCY_NAME})"
            )
        else:
            description.append(
                f"üò¢ **–£–≤—ã, –Ω–æ –¥–∞–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–π!** "
                f"`{slot_amount}` {self.economy.CURRENCY_NAME} –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã —Å –ª–∏—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞!"
            )

        balance_update_amount = self.amount * win_multiplier if win_multiplier else -self.amount
        await db.update_member(
            "UPDATE users SET balance = balance + ? WHERE member_id = ? AND guild_id = ?",
            [balance_update_amount, inter.author.id, inter.guild.id],
        )

        embed = disnake.Embed(description="".join(description), color=self.color.MAIN)
        embed.set_author(
            name="–ê–∑–∞—Ä—Ç–Ω–∞—è –∏–≥—Ä–∞ ¬´–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞¬ª", icon_url=inter.author.display_avatar.url
        )
        await inter.edit_original_message(embed=embed, view=None)


    @disnake.ui.button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=disnake.ButtonStyle.red, emoji="‚ùå")
    async def delete_role(self, button: disnake.ui.Button, inter):
        if not inter.user == self.inter.author:
            return await inter.response.send_message(
                embed=disnake.Embed(
                    description=f"‚ùå | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.",
                    color=self.color.RED,
                ),
                ephemeral=True,
            )
            
        self.stop()
        await self.message.delete()
