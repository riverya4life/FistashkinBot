import disnake
import random
import asyncio

from disnake.ext import commands
from utils import constant, enums, CustomError, generation_string, main
from helpers import MineswiperView
from itertools import repeat
from services import (
    fifty_api_fetch_guess,
    animal_get_image,
    hatsunia_get_image,
    waifu_get_image,
)
from classes.cooldown import default_cooldown
from classes import database as db


class Entertainment(commands.Cog, name="üòÑ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.eightball = constant.EightBall()
        self.color = enums.Color()
        self.gen = generation_string.Generation()
        self.main = main.MainSettings

    NSFW_DESCRIPTIONS = {
        "–ó–∞–¥–Ω–∏—Ü—ã": "ass",
        "–ë–î–°–ú": "bdsm",
        "–ö–∞–º)": "cum",
        "–î–µ–≤—É—à–∫–∏-–¥–æ–º–∏–Ω–∞—Ç–æ—Ä—ã": "femdom",
        "–•–µ–Ω—Ç–∞–π": "hentai",
        "–ò–Ω—Ü–µ—Å—Ç": "incest",
        "–ú–∞—Å—Ç—É—Ä–±–∞—Ü–∏—è": "masturbation",
        "–≠—Ä–æ—Ç–∏–∫–∞": "ero",
        "–û—Ä–≥–∏—è": "orgy",
        "–Æ—Ä–∏": "yuri",
        "–¢—Ä—É—Å–∏–∫–∏": "pantsu",
        "–û—á–∫–æ (–æ—á–∫–∏)": "glasses",
        "–†–∞–±–æ—Ç–∞ —Ä—É—á–∫–∞–º–∏": "handjob",
        "–ë–ª–æ—É–¥–∂–æ–±": "blowjob",
        "–†–∞–±–æ—Ç–∞ –≥—Ä—É–¥—å—é": "boobjob",
        "–ü—Ä–æ—Å—Ç–æ –≥—Ä—É–¥—å": "boobs",
        "–ù–æ–∂–∫–∏": "footjob",
        "–ï—â—ë –±–æ–ª—å—à–µ —Ö–µ–Ω—Ç–∞—è": "gif",
        "–ê—Ö–µ–≥–∞–æ": "ahegao",
        "–®–∫–æ–ª—å–Ω–∏—Ü—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ...": "uniform",
        "–©—É–ø–∞–ª—å—Ü–∞": "tentacles",
        "–ë—ë–¥—Ä–∞": "thighs",
        "–ö–æ—à–∫–æ-–¥–µ–≤–æ—á–∫–∏": "nsfwNeko",
        "–Æ–±–æ—á–∫–∏": "zettaiRyouiki",
    }

    ANIME_GIRLS = {
        "–ú–µ–≥—É–º–∏–Ω": "megumin",
        "–®–∏–Ω–æ–±—É": "shinobu",
        "–ê–≤–∞–≤–æ": "awoo",
        "–ù–µ–∫–æ": "neko",
        "–ü–æ–∫–µ": "poke",
        "–†–∞–Ω–¥–æ–º –≤–∞–π—Ñ—É": "waifu",
    }

    INTERACTION_CHOICE = {
        "–ü–æ–≥–ª–∞–¥–∏—Ç—å": "pat",
        "–û–±–Ω—è—Ç—å": "hug",
        "–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å": "kiss",
        "–û–±–ª–∏–∑–Ω—É—Ç—å": "lick",
        "–ü—Ä–∏–∂–∞—Ç—å": "cuddle",
        "–í–∑—è—Ç—å –∑–∞ —Ä—É–∫—É": "handhold",
        "–ü–æ–∫–æ—Ä–º–∏—Ç—å": "nom",
        "–î–∞—Ç—å –ø–æ—â–µ—á–∏–Ω—É": "slap",
        "–°–¥–µ–ª–∞—Ç—å –∫—É—Å—å": "bite",
        "–î–∞—Ç—å –ø—è—Ç—å": "highfive",
    }

    INTERACTION_DESCRIPTIONS = {
        "pat": "{author} –ø–æ–≥–ª–∞–¥–∏–ª(-–∞) {user}",
        "hug": "{author} –æ–±–Ω—è–ª(-–∞) {user}",
        "kiss": "{author} –ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) {user}",
        "lick": "{author} –æ–±–ª–∏–∑–Ω—É–ª(-–∞) {user}",
        "cuddle": "{author} –ø—Ä–∏–∂–∞–ª(-–∞) –∫ —Å–µ–±–µ {user}",
        "handhold": "{author} –≤–∑—è–ª(-–∞) –∑–∞ —Ä—É–∫—É {user}",
        "nom": "{author} –ø–æ–∫–æ—Ä–º–∏–ª(-–∞) {user}",
        "slap": "{author} –¥–∞–ª(-–∞) –ø–æ—â–µ—á–∏–Ω—É {user}",
        "bite": "{author} —Å–¥–µ–ª–∞–ª(-–∞) –∫—É—Å—å {user}",
        "highfive": "{author} –¥–∞–ª(-–∞) –ø—è—Ç—å {user}",
    }

    INTERACTION_DESCRIPTIONS_MYSELF = {
        "pat": "{author} –ø–æ–≥–ª–∞–¥–∏–ª(-–∞) —Å–µ–±—è",
        "hug": "{author} –æ–±–Ω—è–ª(-–∞) —Å–µ–±—è",
        "kiss": "{author} –ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) —Å–µ–±—è",
        "lick": "{author} –æ–±–ª–∏–∑–Ω—É–ª(-–∞) —Å–µ–±—è",
        "cuddle": "{author} –ø—Ä–∏–∂–∞–ª(-–∞) —Å–µ–±—è –∫ —Å–µ–±–µ",
        "handhold": "{author} –≤–∑—è–ª(-–∞) —Å–µ–±—è –∑–∞ —Ä—É–∫—É",
        "nom": "{author} –ø–æ–∫–æ—Ä–º–∏–ª(-–∞) —Å–µ–±—è",
        "slap": "{author} –¥–∞–ª(-–∞) —Å–µ–±–µ –ø–æ—â—ë—á–∏–Ω—É",
        "bite": "{author} —É–∫—É—Å–∏–ª(-–∞) —Å–µ–±—è",
        "highfive": "{author} –¥–∞–ª(-–∞) —Å–µ–±–µ –ø—è—Ç—å",
    }

    INTERACTION_DESCRIPTIONS_FISTASHKIN = {
        "pat": "{author} –ø–æ–≥–ª–∞–¥–∏–ª(-–∞) {user}",
        "hug": "{author} –æ–±–Ω—è–ª(-–∞) {user}",
        "kiss": "{author} –ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞) {user}",
        "lick": "{author} –æ–±–ª–∏–∑–Ω—É–ª(-–∞) {user}",
        "cuddle": "{author} –ø—Ä–∏–∂–∞–ª(-–∞) –∫ —Å–µ–±–µ {user}",
        "handhold": "{author} –≤–∑—è–ª(-–∞) –∑–∞ —Ä—É–∫—É {user}",
        "nom": "{author} –ø–æ–∫–æ—Ä–º–∏–ª(-–∞) {user}",
        "slap": "{author} –Ω—É –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫ —Å–æ –º–Ω–æ–π :(",
        "bite": "{author} –∞–π... –ó–∞ —à–æ —Ç—ã —Ç–∞–∫ —Å–æ –º–Ω–æ–π?",
        "highfive": "{author} –¥–µ—Ä–∂–∏ –ø—è—Ç—é–Ω—é üñêÔ∏è",
    }

    ANIMALS_LIST = {
        "–õ–∏—Å–∞": "fox",
        "–ï–Ω–æ—Ç": "raccoon",
        "–ö–æ—à–∫–∞": "cat",
        "–°–æ–±–∞–∫–∞": "dog",
        "–ü—Ç–∏—Ü–∞": "bird",
        "–ü–∞–Ω–¥–∞": "panda",
    }

    GUESS_GAME = {
        "üéÆ –ò–≥—Ä—ã": "game",
        "üåá –ì–æ—Ä–æ–¥–∞": "city",
        "üçÉ –õ–æ–≥–æ—Ç–∏–ø—ã": "logo",
        "üåé –°—Ç—Ä–∞–Ω—ã": "country",
        "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "vehicle",
    }

    @commands.slash_command(
        name=disnake.Localized("ball", key="EIGHT_BALL_COMMAND_NAME"),
        description=disnake.Localized(
            "Answers a users question.", key="EIGHT_BALL_COMMAND_DESCRIPTION"
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def ball(
        self,
        inter: disnake.ApplicationCommandInteraction,
        question=commands.Param(
            name=disnake.Localized("question", key="EIGHT_BALL_COMMAND_TEXT_NAME"),
            description=disnake.Localized(
                "Enter your question.", key="EIGHT_BALL_COMMAND_TEXT_DESCRIPTION"
            ),
        ),
    ):
        await inter.response.defer(ephemeral=False)
        embed = (
            disnake.Embed(description=question, color=self.color.MAIN)
            .add_field(
                name="**–û—Ç–≤–µ—Ç: **",
                value=random.choice(self.eightball.RESPONSES),
                inline=False,
            )
            .set_author(name="üé± –ò–≥—Ä–∞ 8ball")
            .set_thumbnail(url=inter.author.display_avatar.url)
        )
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("interaction", key="INTERACTION_COMMAND_NAME"),
        description=disnake.Localized(
            "Interact with the user.", key="INTERACTION_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def interact(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author,
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
        choice: str = commands.Param(
            name=disnake.Localized("choice", key="INTERACTION_COMMAND_CHOICE_NAME"),
            description=disnake.Localized(
                "Choose what interaction you want to do.",
                key="INTERACTION_COMMAND_CHOICE_DESCRIPTION",
            ),
            choices=[disnake.OptionChoice(x, x) for x in INTERACTION_CHOICE.keys()],
        ),
    ):
        try:
            await inter.response.defer(ephemeral=False)
            descriptions = (
                self.INTERACTION_DESCRIPTIONS
                if member != inter.author and member != inter.bot.user
                else self.INTERACTION_DESCRIPTIONS_MYSELF
                if member == inter.author
                else self.INTERACTION_DESCRIPTIONS_FISTASHKIN
            )
            image = await waifu_get_image(
                type="sfw", category=self.INTERACTION_CHOICE.get(choice)
            )
            embed = (
                disnake.Embed(
                    description=f"**{descriptions[self.INTERACTION_CHOICE.get(choice)].format(author=inter.author.display_name, user=member.display_name)}**",
                    color=self.color.MAIN,
                )
                .set_image(url=image)
            )
            await inter.edit_original_message(embed=embed)
        except Exception as e:
            raise CustomError(f"‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")

    @commands.slash_command(
        name=disnake.Localized("nsfw", key="NSFW_COMMAND_NAME"),
        description=disnake.Localized(
            "Well... It was not bad.", key="NSFW_COMMAND_DESCRIPTION"
        ),
    )
    @commands.is_nsfw()
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def nsfw(
        self,
        inter: disnake.ApplicationCommandInteraction,
        choice: str = commands.Param(
            name=disnake.Localized("choice", key="NSFW_COMMAND_CHOICE_NAME"),
            description=disnake.Localized(
                "Choose something from the list.",
                key="NSFW_COMMAND_CHOICE_DESCRIPTION",
            ),
            choices=[disnake.OptionChoice(x, x) for x in NSFW_DESCRIPTIONS.keys()],
        ),
    ):
        try:
            await inter.response.defer(ephemeral=False)
            image = await hatsunia_get_image(
                category=self.NSFW_DESCRIPTIONS.get(choice)
            )
            embed = (
                disnake.Embed(color=self.color.MAIN)
                .set_image(url=image)
            )
            await inter.edit_original_message(embed=embed)
        except Exception as e:
            raise CustomError("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")

    @commands.slash_command(
        name=disnake.Localized("anime-chan", key="ANIME_CHAN_COMMAND_NAME"),
        description=disnake.Localized(
            "Anime-chan!", key="ANIME_CHAN_COMMAND_DESCRIPTION"
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def anime_girl(
        self,
        inter: disnake.ApplicationCommandInteraction,
        choice: str = commands.Param(
            name=disnake.Localized("choice", key="ANIME_CHAN_CHOICE_NAME"),
            description=disnake.Localized(
                "Select the tag with anime-chan.", key="ANIME_CHAN_CHOICE_DESCRIPTION"
            ),
            choices=[disnake.OptionChoice(x, x) for x in ANIME_GIRLS.keys()],
        ),
    ):
        try:
            await inter.response.defer(ephemeral=False)
            image = await waifu_get_image(
                type="sfw", category=self.ANIME_GIRLS.get(choice)
            )
            embed = (
                disnake.Embed(
                    description=f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å **{choice.title()}**", color=self.color.MAIN
                )
                .set_image(url=image)
            )
            await inter.edit_original_message(embed=embed)
        except Exception as e:
            raise CustomError("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")

    @commands.slash_command(
        name=disnake.Localized("minesweeper", key="MINESWEEPER_COMMAND_NAME"),
        description=disnake.Localized(
            "Play minesweeper mini-game.", key="MINESWEEPER_COMMAND_DESCRIPTION"
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def mine(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        board = [["\u200b"] * 5] * 5
        bombs = 0
        bombpositions = []
        for x in repeat(None, random.randint(4, 11)):
            random_index = random.randint(0, 19)
            if random_index not in bombpositions and random_index not in [
                0,
                4,
                20,
                24,
            ]:
                bombpositions.append(random_index)
                bombs += 1

        def ExtractBlocks():
            new_b = []
            for x in board:
                for y in x:
                    new_b.append(y)
            return new_b

        view = MineswiperView(inter, ExtractBlocks(), bombpositions, board)
        message = await inter.edit_original_message(
            f"–í—Å–µ–≥–æ –±–æ–º–±: `{len(bombpositions)}`",
            view=view,
        )
        view.message = message

    @commands.slash_command(
        name=disnake.Localized("dice", key="ROLLDICE_COMMAND_NAME"),
        description=disnake.Localized(
            "Play a mini-game with rolling a dice.", key="ROLLDICE_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def roll_dice(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        dice_roll = random.randint(1, 6)

        embed = (
            disnake.Embed(
                description=f"[`üé≤`] –ù–∞ –∫—É–±–∏–∫–µ –≤—ã–ø–∞–ª–∞ —Ü–∏—Ñ—Ä–∞: **{dice_roll}**",
                color=self.color.MAIN,
            )
            .set_author(name="üé≤ –ö–æ—Å—Ç–∏")
            .set_thumbnail(url=inter.author.display_avatar.url)
            .set_footer(text="üíù –û–ø, –æ–ø-–ª—è!")
        )
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("animal", key="ANIMAL_COMMAND_NAME"),
        description=disnake.Localized(
            "It outputs a random photo of the chosen animal.",
            key="ANIMAL_COMMAND_DESCRIPTION",
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def animal(
        self,
        inter: disnake.ApplicationCommandInteraction,
        choice: str = commands.Param(
            name=disnake.Localized("choice", key="ANIMAL_CHOICE_NAME"),
            description=disnake.Localized(
                "Please choose an animal.", key="ANIMAL_CHOICE_DESCRIPTION"
            ),
            choices=[disnake.OptionChoice(x, x) for x in ANIMALS_LIST.keys()],
        ),
    ):
        try:
            await inter.response.defer(ephemeral=False)
            image = await animal_get_image(category=self.ANIMALS_LIST.get(choice))
            embed = (
                disnake.Embed(color=self.color.MAIN)
                .set_image(url=image)
            )
            await inter.edit_original_message(embed=embed)
        except Exception as e:
            raise CustomError("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!")

    @commands.slash_command(
        name=disnake.Localized("guess", key="GUESS_GAME_COMMAND_NAME"),
        description=disnake.Localized(
            "Guess what is shown in the picture.", key="GUESS_GAME_COMMAND_DESCRIPTION"
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def guess_game(
        self,
        inter: disnake.ApplicationCommandInteraction,
        choice: str = commands.Param(
            name=disnake.Localized("choice", key="GUESS_GAME_CHOICE_NAME"),
            description=disnake.Localized(
                "Select a category.", key="GUESS_GAME_CHOICE_DESCRIPTION"
            ),
            choices=[disnake.OptionChoice(x, x) for x in GUESS_GAME.keys()],
        ),
    ):
        try:
            await inter.response.defer(ephemeral=False)
            type = self.GUESS_GAME.get(choice)

            item, answers, text, image, country = await fifty_api_fetch_guess(
                category=type
            )
            lower_answers = [answer.lower() for answer in answers]

            def check(message):
                return (
                    message.content.lower() in lower_answers
                    and message.channel == inter.channel
                )

            guess_title = (
                "–∏–≥—Ä—É üéÆ"
                if type == "game"
                else (
                    "–≥–æ—Ä–æ–¥ üåá"
                    if type == "city"
                    else (
                        "–ª–æ–≥–æ—Ç–∏–ø üçÉ"
                        if type == "logo"
                        else (
                            "—Å—Ç—Ä–∞–Ω—É üåé"
                            if type == "country"
                            else ("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ üöó" if type == "vehicle" else "")
                        )
                    )
                )
            )
            guess_description = (
                "–∫–∞–∫–∞—è –∏–≥—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∞"
                if type == "game"
                else (
                    "–∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω"
                    if type == "city"
                    else (
                        "–∫–∞–∫–æ–π –ª–æ–≥–æ—Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω"
                        if type == "logo"
                        else ("–∫–∞–∫–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω" if type == "vehicle" else "")
                    )
                )
            )
            description = None
            percentage = random.randint(10, 100)
            podsk = f"\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: **{await self.gen.generation(answers[0])}**" if percentage < 50 else""
            country_text = f"\n–°—Ç—Ä–∞–Ω–∞: **{country}**" if type == "city" else ""

            if type == "country":
                description = f"–£ –≤–∞—Å –µ—Å—Ç—å **60 —Å–µ–∫—É–Ω–¥** —á—Ç–æ–±—ã –Ω–∞–∑–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ **–æ–ø–∏—Å–∞–Ω–∏—é** –∏ **–∫–∞—Ä—Ç–∏–Ω–∫–µ** —Å Google Maps.\n\n"
            else:
                description = f"–£ –≤–∞—Å –µ—Å—Ç—å **30 —Å–µ–∫—É–Ω–¥** —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, {guess_description} –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –Ω–∏–∂–µ.{country_text}{podsk}"

            embed = (
                disnake.Embed(
                    title=f"–£–≥–∞–¥–∞–π {guess_title}", color=disnake.Color.random(),
                    description=description
                )
                .set_image(url=image)
                .add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=f"{text}.") if type == "country" else None
                #.set_footer(text=f"DEBUG –æ—Ç–≤–µ—Ç—ã: {answers}")  if inter.author.id == self.main.DEVELOPER_ID else None
            )
            await inter.edit_original_message(embed=embed)

            try:
                timeout = 60.0 if type == "country" else 30.0
                message = await self.bot.wait_for(
                    "message", timeout=timeout, check=check
                )
                if message.content.lower() in lower_answers:
                    embed = (
                        disnake.Embed(
                            title=f"–£–≥–∞–¥–∞–π {guess_title}",
                            description=f"–û—Ç–≤–µ—Ç: **{answers[0]}**{country_text}",
                            color=self.color.GREEN,
                        )
                        .set_image(url=image)
                    )
                    return await inter.followup.send(
                        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: **{message.author.mention}**", embed=embed
                    )
                else:
                    embed = (
                        disnake.Embed(
                            title=f"–£–≥–∞–¥–∞–π {guess_title}",
                            description=f"–û—Ç–≤–µ—Ç: **{answers[0]}**{country_text}",
                            color=self.color.RED,
                        )
                        .set_image(url=image)
                    )
                    return await inter.followup.send(
                        "**–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ—Ç—Å—É–≤—Å—Ç–≤—É—é—Ç**", embed=embed
                    )
            except asyncio.TimeoutError:
                embed = (
                    disnake.Embed(
                        title=f"–£–≥–∞–¥–∞–π {guess_title}",
                        description=f"–û—Ç–≤–µ—Ç: **{answers[0]}**",
                        color=self.color.RED,
                    )
                    .set_image(url=image)
                )
                return await inter.followup.send(
                    "**–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ—Ç—Å—É–≤—Å—Ç–≤—É—é—Ç**", embed=embed
                )
        except Exception as e:
            raise CustomError(
                f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è **{choice}** –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. {e}"
            )


def setup(bot):
    bot.add_cog(Entertainment(bot))
