import disnake
import random
import datetime
import platform
import aiohttp
import psutil

from disnake.ext import commands
from bs4 import BeautifulSoup
from utils import constant, enums, main, buttons, paginator, rating
from jishaku.modules import package_version
from utils import CustomError
from humanize import naturaldelta, naturalsize
from os import getpid
from helpers import BioButtons
from core import config

from classes.cooldown import default_cooldown
from classes import database as db


class General(commands.Cog, name="üõ†Ô∏è –£—Ç–∏–ª–∏—Ç—ã"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.profile = constant.ProfileEmojis()
        self.main = main.MainSettings()
        self.server = constant.ServerEmojis()
        self.color = enums.Color()
        self.economy = main.EconomySystem()
        self.enum = enums.Enum()
        self.rating = rating.Rating()
        self.config = config.Config()

    async def autocomplete_faq(
        inter: disnake.ApplicationCommandInteraction, string: str
    ):
        return list(
            filter(
                lambda question: string in question,
                [i["question"] for i in constant.Faq.FAQ],
            )
        )

    @commands.slash_command(
        name=disnake.Localized("faq", key="FAQ_COMMAND_NAME"),
        description=disnake.Localized(
            "See the most frequently asked questions.", key="FAQ_COMMAND_DESCRIPTION"
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def faq(
        self,
        inter: disnake.ApplicationCommandInteraction,
        question: str = commands.Param(
            name=disnake.Localized("question", key="FAQ_QUESTION_COMMAND_NAME"),
            description=disnake.Localized(
                "Choose your question here.", key="FAQ_QUESTION_COMMAND_DESCRIPTION"
            ),
            autocomplete=autocomplete_faq,
        ),
    ):
        if question in [i["question"] for i in constant.Faq.FAQ]:
            await inter.response.defer(ephemeral=False)
            embed = (
                disnake.Embed(
                    description=[
                        i["answer"] for i in constant.Faq.FAQ if i["question"] == question
                    ][0],
                    color=self.color.MAIN,
                )
                .set_author(
                    name=f"FAQ: {question}", icon_url=self.bot.user.display_avatar.url
                )
                .set_footer(
                    text="–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–∞—à–µ–π –æ—à–∏–±–∫–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    icon_url=self.main.FOOTER_AVATAR,
                )
            )
            await inter.edit_original_message(embed=embed, view=buttons.Links())

        else:
            await inter.edit_original_message(
                "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –∫–∞–Ω–∞–ª–æ–≤."
            )

    @commands.slash_command(
        name=disnake.Localized("userinfo", key="USER_INFO_COMMAND_NAME"),
        description=disnake.Localized(
            "Shows user information.", key="USER_INFO_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def userinfo(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author,
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
    ):
        await inter.response.defer(ephemeral=False)

        if not member:
            member = inter.author

        data = await db.get_data(member)
        user = await self.bot.fetch_user(member.id)
        bio = await db.get_bio(member)

        registerf = disnake.utils.format_dt(member.created_at, style="f")
        registerr = disnake.utils.format_dt(member.created_at, style="R")
        joinedf = disnake.utils.format_dt(member.joined_at, style="f")
        joinedr = disnake.utils.format_dt(member.joined_at, style="R")

        rank_rating_pos = await self.rating.rating_rank(member=member)
        balance_rating_pos = await self.rating.rating_balance(member=member)

        level = self.enum.format_large_number(data["level"])
        xp = self.enum.format_large_number(data["xp"])
        total_xp = self.enum.format_large_number(data["total_xp"])
        xp_to_lvl = self.enum.format_large_number(
            5 * (data["level"] ** 2) + 50 * data["level"] + 100
        )
        balance = self.enum.format_large_number(data["balance"])
        ranking_position = self.enum.format_large_number(rank_rating_pos[0])
        ranking_members = self.enum.format_large_number(rank_rating_pos[1])
        balance_position = self.enum.format_large_number(balance_rating_pos[0])
        balance_members = self.enum.format_large_number(balance_rating_pos[1])

        badges = [
            self.profile.BADGES[badge.name]
            for badge in member.public_flags.all()
            if badge.name in self.profile.BADGES
        ]
        if member.id == self.main.DEVELOPER_ID:
            badges.append(self.profile.DEVELOPER)  # Developer
        if member.premium_since:
            badges.append(self.profile.NITRO_BOOSTER)  # Nitro Booster
        if member.display_avatar.is_animated() or user.banner:
            badges.append(self.profile.BOOSTER_SUBSCRIBER)  # Nitro Subscriber
        if member.discriminator == "0":
            badges.append(self.profile.UPDATED_NICKNAME)  # Updated Nickname

        description = [
            f"**–ò–º—è {'–±–æ—Ç–∞' if member.bot else '—É—á–∞—Å—Ç–Ω–∏–∫–∞'}:** {member} ({member.mention})",
            f"**–°—Ç–∞—Ç—É—Å:** {self.profile.STATUS[member.status]}",  # **| –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {'`üì± Mobile`' if member.is_on_mobile() else '`üñ•Ô∏è Desktop`'}
            f"**–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:** {joinedf} ({joinedr})",
            f"**–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** {registerf} ({registerr})",
        ]

        view = None
        if not member.bot:
            for activity in member.activities:
                if activity.type == disnake.ActivityType.playing:
                    description.append(
                        f"**–ò–≥—Ä–∞–µ—Ç –≤:** {activity.name} | <t:{round(activity.created_at.timestamp())}:R>"
                    )
                elif activity.type == disnake.ActivityType.streaming:
                    description.append(f"**–°—Ç—Ä–∏–º–∏—Ç:** {activity.name}")
                elif activity.type == disnake.ActivityType.watching:
                    description.append(f"**–°–º–æ—Ç—Ä–∏—Ç:** {activity.name}")
                elif activity.type == disnake.ActivityType.listening and isinstance(
                    activity, disnake.Spotify
                ):
                    description.append(
                        f"**–°–ª—É—à–∞–µ—Ç Spotify:** {self.profile.SPOTIFY} **[{activity.title} | {', '.join(activity.artists)}]({activity.track_url})**"
                    )
                    view = buttons.Spotify_Link(url=activity.track_url)
                elif activity.type == disnake.ActivityType.listening:
                    description.append(f"**–°–ª—É—à–∞–µ—Ç:** {activity.name}")

        if (
            member.bot
            or member != inter.author
            and bio
            == "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∫–æ–º–∞–Ω–¥–æ–π `/–æ—Å–µ–±–µ`"
        ):
            bio = None

        embed = (
            disnake.Embed(
                description=bio,
                color=user.accent_color,
                timestamp=inter.created_at,
            )
            .add_field(
                name="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                value="\n".join(description),
                inline=False,
            )
            .add_field(name="–ó–Ω–∞—á–∫–∏", value=" ".join(badges), inline=True) if badges and not member.bot else None
        )

        if (not member.bot):
            embed.add_field(
                name="–†–µ–π—Ç–∏–Ω–≥",
                value=f"# {ranking_position}/{ranking_members}",
                inline=True,
            )
            embed.add_field(
                name="–£—Ä–æ–≤–µ–Ω—å",
                value=level,
                inline=True,
            )
            embed.add_field(
                name="–û–ø—ã—Ç",
                value=f"{xp}/{xp_to_lvl} (–≤—Å–µ–≥–æ {total_xp})",
                inline=True,
            )
            embed.add_field(
                name="–≠–∫–æ–Ω–æ–º–∏–∫–∞",
                value=f"{balance} {self.economy.CURRENCY_NAME} | # {balance_position}/{balance_members}",
                inline=True,
            )

        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_image(url=user.banner.url if user.banner else None)
        embed.set_footer(text=f"ID: {member.id}", icon_url=member.display_avatar.url)
        embed.set_author(
            name=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {'–±–æ—Ç–µ' if member.bot else '—É—á–∞—Å—Ç–Ω–∏–∫–µ'} {member.display_name}",
            icon_url=member.display_avatar.url,
        )

        await inter.edit_original_message(embed=embed, view=view)

    @commands.slash_command(
        name=disnake.Localized("serverinfo", key="SERVER_INFO_COMMAND_NAME"),
        description=disnake.Localized(
            "Shows server information.", key="SERVER_INFO_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def serverinfo(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        shard_names = {
            "0": "#1 (–†—ë–º–µ–Ω)",
            "1": "#2 (–ê–∫–≤–∞)",
            "2": "#3 (–î–∏–∫—Å–∏)",
            "3": "#4 (–ì—Ä–æ—É–≤)",
            "4": "#5 (–•–∞–∫–∞—Ä–∏)",
        }

        total_members = self.enum.format_large_number(len(inter.guild.members))
        members = self.enum.format_large_number(
            len(list(filter(lambda m: m.bot == False, inter.guild.members)))
        )
        bots = self.enum.format_large_number(
            len(list(filter(lambda m: m.bot == True, inter.guild.members)))
        )

        members_online = self.enum.format_large_number(
            len(list(filter(lambda m: str(m.status) == "online", inter.guild.members)))
        )
        members_idle = self.enum.format_large_number(
            len(list(filter(lambda m: str(m.status) == "idle", inter.guild.members)))
        )
        members_dnd = self.enum.format_large_number(
            len(list(filter(lambda m: str(m.status) == "dnd", inter.guild.members)))
        )
        members_offline = self.enum.format_large_number(
            len(list(filter(lambda m: str(m.status) == "offline", inter.guild.members)))
        )

        total_channels = self.enum.format_large_number(len(inter.guild.channels))
        text_channels = self.enum.format_large_number(len(inter.guild.text_channels))
        voice_channels = self.enum.format_large_number(len(inter.guild.voice_channels))

        members_field = [
            f"{self.server.MEMBERS_TOTAL} –í—Å–µ–≥–æ: **{total_members}**",
            f"{self.server.MEMBERS} –õ—é–¥–µ–π: **{members}**",
            f"{self.server.BOT} –ë–æ—Ç–æ–≤: **{bots}**",
        ]
        if inter.guild.premium_subscribers:
            members_field.append(
                f"–ë—É—Å—Ç–µ—Ä–æ–≤: **{len(inter.guild.premium_subscribers)}**"
            )

        members_field_status = [
            f"{self.profile.ONLINE} –í —Å–µ—Ç–∏: **{members_online}**",
            f"{self.profile.IDLE} –ù–µ–∞–∫—Ç–∏–≤–µ–Ω: **{members_idle}**",
            f"{self.profile.DND} –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å: **{members_dnd}**",
            f"{self.profile.OFFLINE} –ù–µ –≤ —Å–µ—Ç–∏: **{members_offline}**",
        ]
        channels_field = []
        if inter.guild.channels:
            channels_field.append(
                f"{self.server.CHANNELS_TOTAL} –í—Å–µ–≥–æ: **{total_channels}**"
            )
        if inter.guild.text_channels:
            channels_field.append(
                f"{self.server.TEXT_CHANNEL} –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: **{text_channels}**"
            )
        if inter.guild.voice_channels:
            channels_field.append(
                f"{self.server.VOICE_CHANNEL} –ì–æ–ª–æ—Å–æ–≤—ã—Ö: **{voice_channels}**"
            )
        if inter.guild.stage_channels:
            channels_field.append(
                f"{self.server.STAGE_CHANNEL} –¢—Ä–∏–±—É–Ω: **{len(inter.guild.stage_channels)}**"
            )
        if inter.guild.forum_channels:
            channels_field.append(
                f"{self.server.FORUM_CHANNEL} –§–æ—Ä—É–º–æ–≤: **{len(inter.guild.forum_channels)}**"
            )

        embed = (
            disnake.Embed(
                description=None
                if not inter.guild.description
                else inter.guild.description,
                color=self.color.MAIN,
            )
            .add_field(
                name="–£—á–∞—Å—Ç–Ω–∏–∫–∏:",
                value="\n".join(members_field),
                inline=True,
            )
            .add_field(
                name="–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:",
                value="\n".join(members_field_status),
                inline=True,
            )
            .add_field(
                name="–ö–∞–Ω–∞–ª—ã:",
                value="\n".join(channels_field),
                inline=True,
            )
            .add_field(
                name="–í–ª–∞–¥–µ–ª–µ—Ü:",
                value=f"{inter.guild.owner}\n{inter.guild.owner.mention}",
                inline=True,
            )
            .add_field(
                name="–°–æ–∑–¥–∞–Ω:",
                value=f"<t:{round(inter.guild.created_at.timestamp())}:D>\n"
                f"<t:{round(inter.guild.created_at.timestamp())}:R>",
                inline=True,
            )
            .add_field(
                name="–ü—Ä–æ—á–µ–µ:",
                value=f"–°—Ç–∏–∫–µ—Ä–æ–≤: **{len(inter.guild.stickers)}**\n"
                f"–≠–º–æ–¥–∑–∏: **{len(inter.guild.emojis)}**\n"
                f"–£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞: **{inter.guild.premium_tier}**\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π: **{len(inter.guild.roles[:-1])}**",
                inline=True,
            )
            .set_thumbnail(url=inter.guild.icon.url if inter.guild.icon else None)
            .set_image(url=inter.guild.banner.url if inter.guild.banner else None)
            .set_footer(
                text=f"ID: {inter.guild.id} ‚Ä¢ –ó–≤–µ–Ω–æ: {shard_names[str(inter.guild.shard_id)]}"
            )
            .set_author(
                name=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {inter.guild.name}",
                icon_url=inter.guild.icon.url if inter.guild.icon else None,
            )
        )
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("avatar", key="AVATAR_COMMAND_NAME"),
        description=disnake.Localized(
            "Shows the avatar of the mentioned user or the user who called the command.",
            key="AVATAR_COMMAND_DESCRIPTION",
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def avatar(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            lambda inter: inter.author,
            name=disnake.Localized("user", key="TARGET_USER_NAME"),
            description=disnake.Localized(
                "Select a user.", key="TARGET_USER_DESCRIPTION"
            ),
        ),
    ):
        await inter.response.defer(ephemeral=False)
        if not member:
            member = inter.author

        formats = [
            f"[**[PNG]**]({member.display_avatar.replace(format='png', size=4096).url}) | ",
            f"[**[JPG]**]({member.display_avatar.replace(format='jpg', size=4096).url})",
            f" | [**[WebP]**]({member.display_avatar.replace(format='webp', size=4096).url})",
            f" | [**[GIF]**]({member.display_avatar.replace(format='gif', size=4096).url})"
            if member.display_avatar.is_animated()
            else "",
            f"\n[**[–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä]**]({member.default_avatar.url})",
        ]

        description_format = "".join(formats)
        embed = (
            disnake.Embed(
                description=f"–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∞–≤–∞—Ç–∞—Ä\n{description_format}",
                color=self.color.MAIN,
            )
            .set_image(url=member.display_avatar.url)
            .set_author(
                name=f"–ê–≤–∞—Ç–∞—Ä {'–±–æ—Ç–∞' if member.bot else '—É—á–∞—Å—Ç–Ω–∏–∫–∞'} {member.display_name}",
                icon_url=member.display_avatar.url,
            )
        )
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("roles", key="ROLES_LIST_COMMAND_NAME"),
        description=disnake.Localized(
            "Shows all server roles.", key="ROLES_LIST_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def roles(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        all_roles = []
        guild = inter.guild
        roles = [
            role
            for role in guild.roles
            if role in inter.guild.roles
            if role != inter.guild.default_role
        ]
        roles.reverse()

        items_per_page = 10
        pages = [
            roles[i : i + items_per_page] for i in range(0, len(roles), items_per_page)
        ]

        embed_pages = []
        roles_count = self.enum.format_large_number(len(inter.guild.roles[:-1]))
        for i, page in enumerate(pages):
            embed = (
                disnake.Embed(
                    description="\n".join([role.mention for role in page])
                )
                .set_author(
                    name=f"–†–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ {inter.guild.name} [{roles_count}]",
                    icon_url=inter.guild.icon.url if inter.guild.icon else None,
                )
            )
            embed_pages.append(embed)

        view = paginator.Paginator(inter, embeds=embed_pages)
        message = await inter.edit_original_message(embed=embed_pages[0], view=view)
        view.message = message

    @commands.slash_command(
        name=disnake.Localized("botinfo", key="BOT_INFO_COMMAND_NAME"),
        description=disnake.Localized(
            "Shows interesting information about the bot.",
            key="BOT_INFO_COMMAND_DESCRIPTION",
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def botinfo(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        developer = await self.bot.fetch_user(self.main.DEVELOPER_ID)
        embed = (
            disnake.Embed(
                description=f"üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –§–∏—Å—Ç–∞—à–∫–∏–Ω! –Ø –Ω–µ–±–æ–ª—å—à–æ–π –±–æ—Ç —Å –∫—É—á–∫–æ–π –Ω–µ–±–æ–ª—å—à–∏—Ö –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–µ–π!\n"
                f"\n–ú–æ–π –ø—Ä–µ—Ñ–∏–∫—Å `/` (—Å–ª—ç—à), –Ω–æ —Ç—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ @–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏. –í–∑–≥–ª—è–Ω–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É `/—Ö–µ–ª–ø` –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö üç™",
                colour=self.color.MAIN,
            )
            .set_author(
                name=f"{self.bot.user.name}",
                icon_url=self.bot.user.display_avatar.url,
                url=self.main.BOT_SITE,
            )
            .add_field(
                name="–°–±–æ—Ä–∫–∞:",
                value=self.main.BOT_VERSION,
                inline=True,
            )
            .add_field(
                name="–ú–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:",
                value=f"<:riverya4life:1065581416357826560> [{developer}](https://discord.com/users/{developer.id})",
                inline=True,
            )
            .set_thumbnail(url=self.bot.user.display_avatar.url)
            .set_footer(text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR)
        )
        """embed.add_field(
            name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:",
            value=f"<t:{round(self.bot.user.created_at.timestamp())}:D> (<t:{round(self.bot.user.created_at.timestamp())}:R>)",
            inline=False,
        )"""
        await inter.edit_original_message(embed=embed, view=buttons.Links())

    @commands.slash_command(
        name=disnake.Localized("stats", key="BOT_STATS_COMMAND_NAME"),
        description=disnake.Localized(
            "Shows bot statistics.", key="BOT_STATS_COMMAND_DESCRIPTION"
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def stats(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)

        shard_names = {
            "0": "#1 (–†—ë–º–µ–Ω)",
            "1": "#2 (–ê–∫–≤–∞)",
            "2": "#3 (–î–∏–∫—Å–∏)",
            "3": "#4 (–ì—Ä–æ—É–≤)",
            "4": "#5 (–•–∞–∫–∞—Ä–∏)",
        }

        channels_count = 0
        total_connections = 0
        for guild in self.bot.guilds:
            channels_count += len(guild.channels)
            for voice_channel in guild.voice_channels:
                if voice_channel.members:
                    total_connections += 1

        bot_guilds = self.enum.format_large_number(len(self.bot.guilds))
        bot_guilds_members = self.enum.format_large_number(len(self.bot.users))
        bot_guilds_channels = self.enum.format_large_number(int(channels_count))
        bot_active_voice_connections = self.enum.format_large_number(
            int(total_connections)
        )

        uptimebot = disnake.utils.format_dt(
            round(self.bot.uptime.timestamp()), style="R"
        )
        cpu = psutil.cpu_percent()
        ram = naturalsize(psutil.Process(getpid()).memory_info().rss)
        command_counter = await db.get_used_commands()
        formatted_command_counter_result = self.enum.format_large_number(
            command_counter
        )
        if command_counter >= 100000000:
            formatted_command_counter_result = f"\n{formatted_command_counter_result}"
        else:
            formatted_command_counter_result = f"{formatted_command_counter_result}"

        embed = (
            disnake.Embed(
                description=f"üîß **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è**\n"
                f"**–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:** v{self.main.BOT_VERSION}\n"
                f"**–í–µ—Ä—Å–∏—è Python:** v{platform.python_version()}\n"
                f"**–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏:** disnake v{package_version('disnake')}, disnake-jishaku v{package_version('disnake-jishaku')}\n"
                f"**–û–°:** {platform.platform()}",
                colour=self.color.MAIN,
                timestamp=inter.created_at,
            )
            .set_author(
                name=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {self.bot.user.name}",
                icon_url=self.bot.user.display_avatar.url,
            )
            .add_field(
                name="‚ú® –û—Å–Ω–æ–≤–Ω–∞—è",
                value=f"**–°–µ—Ä–≤–µ—Ä–æ–≤:** {bot_guilds}\n"
                f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {bot_guilds_members}\n"
                f"**–ö–∞–Ω–∞–ª–æ–≤:** {bot_guilds_channels}\n"
                f"**–ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:** {bot_active_voice_connections}\n"
                f"**–ö–ª–∞—Å—Ç–µ—Ä:** # {inter.guild.shard_id + 1} / {len(self.bot.shards)} | {shard_names[str(inter.guild.shard_id)]}",
                inline=True,
            )
            .add_field(
                name="ü§ñ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                value=f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥:** {formatted_command_counter_result}\n"
                f"**–ó–∞–¥–µ—Ä–∂–∫–∞:** {round(self.bot.latency * 1000)} –º—Å\n"
                f"**RAM:** {ram}\n"
                f"**–ù–∞–≥—Ä—É–∑–∫–∞:** {cpu}%\n"
                f"**–ó–∞–ø—É—â–µ–Ω–∞**: {uptimebot}\n",
                inline=True,
            )
            .set_thumbnail(url=self.bot.user.display_avatar.url)
            .set_footer(text=self.main.FOOTER_TEXT, icon_url=self.main.FOOTER_AVATAR)
        )
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("ping", key="BOT_PING_COMMAND_NAME"),
        description=disnake.Localized(
            "Testing bot functionality and delays.", key="BOT_PING_COMMAND_DESCRIPTION"
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def ping(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        embed = disnake.Embed(
            description=f"{inter.author.mention}, —è –∂–∏–≤–æ–π –∏ –∫—É—à–∞—é —Ñ–∏—Å—Ç–∞—à–∫–∏! "
            f"–ú–æ–π –ø–∏–Ω–≥: {round(self.bot.latency * 1000)} –º—Å!",
            color=self.color.MAIN,
        )
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("roleinfo", key="ROLEINFO_COMMAND_NAME"),
        description=disnake.Localized(
            "Displays information about any role on the server.",
            key="ROLEINFO_COMMAND_DESCRIPTION",
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def role_info(
        self,
        inter: disnake.ApplicationCommandInteraction,
        role: disnake.Role = commands.Param(
            name=disnake.Localized("role", key="TARGET_ROLE_NAME"),
            description=disnake.Localized(
                "Select a role.", key="TARGET_ROLE_DESCRIPTION"
            ),
        ),
    ):
        await inter.response.defer(ephemeral=False)
        role_info_array = [
            f"–¶–≤–µ—Ç —Ä–æ–ª–∏: **{hex(role.color.value)} ({'#{0:06x}'.format(role.color.value)})**",
            f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: **{'–î–∞' if role.is_integration() else '–ù–µ—Ç'}**",
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —ç—Ç–æ–π —Ä–æ–ª–∏: **{len(role.members)}**",
            f"–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏: {role.mention}",
            f"–ü–æ–∑–∏—Ü–∏—è: **{role.position}**",
            f"–†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞: <t:{round(role.created_at.timestamp())}:D>",
        ]
        embed = (
            disnake.Embed(
                description="\n".join(role_info_array),
                color=role.color
            )
            .set_author(
                name=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏ {role.name}",
                icon_url=inter.guild.icon.url if inter.guild.icon else None,
            )
            .set_footer(text=f"ID —Ä–æ–ª–∏: {role.id}")
            .set_thumbnail(url=role.icon.url if role.icon else None)
        )
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("clist", key="CLIST_COMMAND_NAME"),
        description=disnake.Localized(
            "Displays a list of members with a specific role.",
            key="CLIST_COMMAND_DESCRIPTION",
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def clist(
        self,
        inter: disnake.ApplicationCommandInteraction,
        role: disnake.Role = commands.Param(
            name=disnake.Localized("role", key="TARGET_ROLE_NAME"),
            description=disnake.Localized(
                "Select a role.", key="TARGET_ROLE_DESCRIPTION"
            ),
        ),
    ):
        await inter.response.defer(ephemeral=False)
        data = [(member.mention or member.nick) for member in role.members]
        member_count = self.enum.format_large_number(len(role.members))

        counter = 0
        paginated_data = []
        for i in range(0, len(data), 10):
            paginated_data.append("\n".join(data[i : i + 10]))

        embeds = []
        for i, page_data in enumerate(paginated_data):
            embed = (
                disnake.Embed(
                    description=f"{page_data}\n",
                    color=role.color
                )
                .set_author(
                    name=f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —Ä–æ–ª—å—é {role} [{member_count}]\n",
                    icon_url=inter.guild.icon.url if inter.guild.icon else None,
                )
                .set_thumbnail(url=role.icon.url if role.icon else None)
            )
            embeds.append(embed)

        view = paginator.Paginator(inter, embeds)
        message = await inter.edit_original_message(embed=embeds[0], view=view)
        view.message = message

    @commands.slash_command(
        name=disnake.Localized("emoji-random", key="EMOJI_RANDOM_COMMAND_NAME"),
        description=disnake.Localized(
            "Finds a random emoji.", key="EMOJI_RANDOM_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.is_nsfw()
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def random_emoji(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=False)
        emoji = random.choice(inter.bot.emojis)
        embed = (
            disnake.Embed(
                description=f"[**–°–∫–∞—á–∞—Ç—å —ç–º–æ–¥–∑–∏–∫**]({emoji.url})",
                color=self.color.MAIN
            )
            .set_author(
                name=f"–≠–º–æ–¥–∑–∏ —Å {emoji.guild.name}",
                icon_url=emoji.guild.icon.url if emoji.guild.icon else None,
            )
            .set_footer(text=f"ID: {emoji.id}")
            .set_image(url=emoji.url)
        )
        await inter.edit_original_message(embed=embed)

    @commands.slash_command(
        name=disnake.Localized("bio", key="USER_BIO_COMMAND_NAME"),
        description=disnake.Localized(
            "Changes the biography of the user.", key="USER_BIO_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def bio(
        self,
        inter: disnake.ApplicationCommandInteraction,
    ):
        await inter.response.defer(ephemeral=False)
        user = await self.bot.fetch_user(inter.author.id)
        bio = await db.get_bio(inter.author)
        if (
            bio
            == "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∫–æ–º–∞–Ω–¥–æ–π `/–æ—Å–µ–±–µ`"
        ):
            bio = "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

        embed = (
            disnake.Embed(
                description=bio,
                color=self.color.MAIN,
            )
            .set_thumbnail(url=inter.author.display_avatar.url)
            .set_image(url=user.banner.url if user.banner else None)
            .set_author(
                name=f"–ë–∏–æ–≥—Ä–∞—Ñ–∏—è {inter.author}", icon_url=inter.author.display_avatar.url
            )
        )
        view = BioButtons(inter)
        message = await inter.edit_original_message(embed=embed, view=view)
        view.message = message

    @commands.slash_command(
        name=disnake.Localized("monitoring", key="MONITORING_COMMAND_NAME"),
        description=disnake.Localized(
            "Displays the monitors where the bot is present.",
            key="MONITORING_COMMAND_DESCRIPTION",
        ),
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def monitoring(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer(ephemeral=True)
        text = [
            f"**–ê –≤–æ—Ç –º–∏–Ω–∏-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –∞–ø–Ω—É—Ç—å {self.bot.user.name}:**\n"
            f"1. –ó–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤, –¥–∞–ª–µ–µ, –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n"
            f"2. –ü–æ—Å–ª–µ –Ω–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ __**–æ—Ü–µ–Ω–∏—Ç—å**__, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –∫–∞–ø—á—É, –∏ –≤—Å—ë. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞—Ç—å —Ç–∞–∫ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (–¥–ª—è SD.C)."
        ]
        embed = (
            disnake.Embed(
                description="".join(text),
                color=self.color.MAIN
            )
            .set_author(
                name=f"{self.bot.user.name} –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞—Ö!",
                icon_url=self.bot.user.display_avatar.url,
            )
            .set_footer(text="–ù—É –∏ –æ—Ç–∑—ã–≤ –ø–æ –∂–µ–ª–∞–Ω–∏—é ü•∞")
        )
        await inter.edit_original_message(embed=embed, view=buttons.BotMonitoring())

    @commands.slash_command(
        name=disnake.Localized("github", key="GITHUB_COMMAND_NAME"),
        description=disnake.Localized(
            "Github repository information.", key="GITHUB_COMMAND_DESCRIPTION"
        ),
        dm_permission=False,
    )
    @commands.dynamic_cooldown(default_cooldown, type=commands.BucketType.user)
    async def github(
        self,
        inter: disnake.ApplicationCommandInteraction,
        arg: str = commands.Param(
            name=disnake.Localized("repository", key="GITHUB_ARG_NAME"),
            description=disnake.Localized(
                "Specify the name of the repository in the format nick/repository.",
                key="GITHUB_ARG_DESCRIPTION",
            ),
        ),
    ):
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.github.com/repos/{arg}") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    await inter.response.defer(ephemeral=False)
                    embed = (
                        disnake.Embed(color=self.color.DARK_GRAY)
                        .set_author(
                            name=data["owner"]["login"],
                            icon_url=data["owner"]["avatar_url"],
                            url=data["owner"]["html_url"],
                        )
                        .set_thumbnail(url=data["owner"]["avatar_url"])
                        .add_field(
                            name="–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:",
                            value=f"[{data['name']}]({data['html_url']})",
                            inline=True,
                        )
                        .add_field(name="–Ø–∑—ã–∫:", value=data["language"], inline=True)
                    )

                    license_url = "None"
                    if (
                        "license" in data
                        and data["license"]
                        and "url" in data["license"]
                    ):
                        async with session.get(data["license"]["url"]) as license_resp:
                            if license_resp.status == 200:
                                license_data = await license_resp.json()
                                license_url = f"[{license_data.get('spdx_id', 'Unknown')}]({license_data.get('html_url', '')})"

                    embed.add_field(name="–õ–∏—Ü–µ–Ω–∑–∏—è:", value=license_url, inline=True)
                    if data["stargazers_count"] != 0:
                        embed.add_field(
                            name="–ó–≤—ë–∑–¥:", value=data["stargazers_count"], inline=True
                        )
                    if data["forks_count"] != 0:
                        embed.add_field(
                            name="–§–æ—Ä–∫–æ–≤:", value=data["forks_count"], inline=True
                        )
                    if data["open_issues"] != 0:
                        embed.add_field(
                            name="–ü—Ä–æ–±–ª–µ–º:", value=data["open_issues"], inline=True
                        )
                    embed.add_field(
                        name="–û–ø–∏—Å–∞–Ω–∏–µ:", value=data["description"], inline=False
                    )

                    async with session.get(data["html_url"]) as html_resp:
                        html_text = await html_resp.text()
                        for meta in BeautifulSoup(
                            html_text, features="html.parser"
                        ).find_all("meta"):
                            try:
                                if meta.attrs["property"] == "og:image":
                                    embed.set_image(url=meta.attrs["content"])
                                    break
                            except:
                                pass

                    await inter.edit_original_message(embed=embed)
                elif resp.status == 404:
                    raise CustomError("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                else:
                    raise CustomError(
                        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!"
                    )


def setup(bot):
    bot.add_cog(General(bot))
